#include <iostream>#include <algorithm>#include <vector>#include <stack>#include <set>#include <queue>int graph[101][101] = {0};int n, m;std::vector<int> already;bool solved = false;bool ended = false;std::queue<int> q;std::vector<int> p;void bfs(int start) {    p.push_back(1);    q.push(start);    already.push_back(1);    while (!q.empty()) {        int now = q.front();        q.pop();        for (int i = 1; i <= n; ++i) {            if (graph[now][i] == 1 && i != now && std::find(already.begin(), already.end(), i) == already.end()) {                if (p.back() == n) {                    break;                }                already.push_back(i);                q.push(i);                p.push_back(i);            }        }    }    if (p.back() == n) {        solved = true;    }}int main() {    scanf("%d %d", &n, &m);    for (int i = 0; i < m; ++i) {        int from, to;        scanf("%d %d", &from, &to);        graph[from][to] = 1;        graph[to][from] = 1;    }    bfs(1);    if (solved) {        printf("YES\n");    } else {        printf("NO\n");    }    for (int i = 0; i < p.size(); ++i) {        printf("%d ", p[i]);    }    return 0;}