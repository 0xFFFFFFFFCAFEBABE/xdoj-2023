#include <iostream>#include <vector>#include <cstring>#include <set>std::vector<std::string> split(std::string str, std::string pattern) {    std::string::size_type pos;    std::vector<std::string> result;    str += pattern;//扩展字符串以方便操作    int size = str.size();    for (int i = 0; i < size; i++) {        pos = str.find(pattern, i);        if (pos < size) {            std::string s = str.substr(i, pos - i);            result.push_back(s);            i = pos + pattern.size() - 1;        }    }    return result;}int cmp(const void *a, const void *b) {    return strcmp(*(const char **) a, *(const char **) b);}int main() {    char temp[256];    gets(temp);    std::string input;    input = temp;    auto c = split(input, " ");    std::set<std::string> mySet(c.begin(),c.end());    // 清空原始 vector 并重新装入不重复的元素    c.assign(mySet.begin(), mySet.end());    std::vector<std::string> pppp;    for (int i = 0; i < c.size(); i++) {        if (c[i][0] == '-') {            pppp.push_back(c[i]);        }    }    std::vector<const char *> res;    for (int i = 0; i < pppp.size(); i++) {        res.push_back(pppp[i].c_str());    }    qsort(&res[0], res.size(), sizeof(const char *), cmp);    for (int i = 0; i < res.size(); i++) {        std::cout << res[i] << " ";    }    if(res.empty())    {        std::cout << "no";    }    return 0;}